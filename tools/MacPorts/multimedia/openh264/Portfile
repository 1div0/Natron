# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0

name                openh264
version             2.3.1
categories          multimedia
maintainers         openmaintainer
platforms           darwin
license             BSD

description         H.264 codec from Cisco
long_description    H.264 codec from Cisco

homepage            http://www.openh264.org
master_sites        https://github.com/cisco/openh264/archive/
distfiles           v${version}${extract.suffix}
checksums           rmd160  ca3955061495282417abefb07b7d95530fed1d94 \
                    sha256  453afa66dacb560bc5fd0468aabee90c483741571bca820a39a1c07f0362dc32 \
                    size    60290897

depends_build-append port:nasm

use_configure no

patchfiles          0001-openh264-1.7.0-leopardinstall.patch

# AVX2 is only supported from Kaby Lake on
# see https://en.wikipedia.org/wiki/Intel_Core

if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_args(${arch}) ARCH=${arch} CXX='${configure.cxx} -arch ${arch}' {*}"LDFLAGS='${configure.cxxflags} ${configure.ldflags}'"
        if {${arch} eq "i386"} {
            lappend merger_build_args(${arch}) {*}"LDFLAGS='${configure.cxxflags} ${configure.ldflags} -Wl,-read_only_relocs,suppress'"
        } else {
            lappend merger_build_args(${arch}) {*}"LDFLAGS='${configure.cxxflags} ${configure.ldflags}'"
        }
    }
} else {
    if {${build_arch} eq "i386"} {
        configure.ld_archflags-append -read_only_relocs suppress
    }
    build.args-append   ARCH=${build_arch} CXX='${configure.cxx} -arch ${build_arch}' {*}"LDFLAGS='${configure.cxxflags} ${configure.ldflags}'"
}
build.args-append       HAVE_AVX2=No CFLAGS_OPT="${configure.cxxflags}" PREFIX=${prefix}

destroot.args-append    DESTDIR=${destroot} PREFIX=${prefix}

livecheck.url       https://github.com/cisco/openh264/releases
livecheck.regex     {/v(\d+(?:\.\d+)*)}
